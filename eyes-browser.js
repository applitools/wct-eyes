/* eslint-disable */

/**
 * @param {string=} query A query string to parse.
 * @return {!Object<string, !Array<string>>} All params on the URL's query.
 */
function getParams(query) {
  query = typeof query === 'string' ? query : window.location.search;
  if (query.substring(0, 1) === '?') {
    query = query.substring(1);
  }
  // python's SimpleHTTPServer tacks a `/` on the end of query strings :(
  if (query.slice(-1) === '/') {
    query = query.substring(0, query.length - 1);
  }
  if (query === '') return {};
  var result = {};
  query.split('&')
    .forEach(function (part) {
      var pair = part.split('=');
      if (pair.length !== 2) {
        console.warn('Invalid URL query part:', part);
        return;
      }
      var key = decodeURIComponent(pair[0]);
      var value = decodeURIComponent(pair[1]);
      if (!result[key]) {
        result[key] = [];
      }
      result[key].push(value);
    });
  return result;
}

/**
 * @param {string} param The param to return a value for.
 * @return {?string} The first value for `param`, if found.
 */
function getParam(param) {
  var params = getParams();
  return params[param] ? params[param][0] : null;
}

/**
 * @param {string} path The URI of the script to load.
 * @param {function} done
 */
function loadScript(path, done) {
  var script = document.createElement('script');
  script.src = path;
  if (done) {
    script.onload = done.bind(null, null);
    script.onerror = done.bind(null, 'Failed to load script ' + script.src);
  }
  document.head.appendChild(script);
}

/**
 * A socket for communication between the CLI and browser runners.
 *
 * @param {string} browserId An ID generated by the CLI runner.
 * @param {!io.Socket} socket The socket.io `Socket` to communicate over.
 */
var CLISocket = /** @class */ (function () {
  var SOCKETIO_ENDPOINT = window.location.protocol + '//' + window.location.host;
  var SOCKETIO_LIBRARY = SOCKETIO_ENDPOINT + '/socket.io/socket.io.js';

  function CLISocket(browserId, socket) {
    this.browserId = browserId;
    this.socket = socket;
  }

  /**
   * @param {string} event The name of the event to fire.
   * @param {*} data Additional data to pass with the event.
   */
  CLISocket.prototype.emitEvent = function (event, data) {
    this.socket.emit('client-event', {
      browserId: this.browserId,
      event: event,
      data: data
    });
  };

  /**
   * Builds a `CLISocket` if we are within a CLI-run environment; short-circuits
   * otherwise.
   *
   * @param {function(*, CLISocket)} done Node-style callback.
   */
  CLISocket.init = function (done) {
    var browserId = getParam('cli_browser_id');
    if (!browserId) return done();

    function openSocket() {
      var socket = io(SOCKETIO_ENDPOINT);
      socket.on('error', function (error) {
        socket.off();
        done(error);
      });

      socket.on('connect', function () {
        socket.off();
        done(null, new CLISocket(browserId, socket));
      });
    }

    if (typeof io !== 'undefined') {
      openSocket();
    } else {
      loadScript(SOCKETIO_LIBRARY, function (error) {
        if (error) return done(error);
        openSocket();
      });
    }
  };
  return CLISocket;
}());


/**
 *
 */
var EyesEmitter = /** @class */ (function () {
  function EyesEmitter() {
    this.events = {};
  }

  EyesEmitter.prototype.on = function (eventName, fn) {
    if (typeof this.events[eventName] !== 'object') {
      this.events[eventName] = [];
    }

    this.events[eventName].push(fn);
  };

  EyesEmitter.prototype.off = function (eventName, fn) {
    if (typeof this.events[eventName] === 'object') {
      var idx = this.events[eventName].indexOf(fn);

      if (idx > -1) {
        this.events[eventName].splice(idx, 1);
      }
    }
  };

  EyesEmitter.prototype.once = function (eventName, fn) {
    this.on(eventName, function g () {
      this.off(eventName, g);
      fn.apply(this, arguments);
    });
  };

  EyesEmitter.prototype.emit = function (eventName) {
    var args = [].slice.call(arguments, 1);

    if (typeof this.events[eventName] === 'object') {
      var events = this.events[eventName];
      for (var i = 0, l = events.length; i < l; i++) {
        events[i].apply(this, args);
      }
    }
  };

  window.EyesEmitter = EyesEmitter;
  return EyesEmitter;
}());


/**
 *
 */
var Eyes = /** @class */ (function () {
  function Eyes() {
    var that = this;
    this.eyesEmitter = window.eyesEmitter = new parent.EyesEmitter();

    this.socket = undefined;
    this.controlFlow = new Promise(function (resolve, reject) {
      CLISocket.init(function (error, socket) {
        if (error) return reject(error);

        that.socket = socket;
        resolve();
      });
    });
  }

  /**
   * @param [appName]
   * @param [testName]
   */
  Eyes.prototype.open = function (appName, testName) {
    var that = this;
    this.controlFlow = this.controlFlow.then(function () {
      return new Promise(function (resolve) {
        that.eyesEmitter.once('eyes:openDone', resolve);
        that.socket.emitEvent('eyes:open', { appName: appName, testName: testName });
      });
    });
    return this.controlFlow;
  };

  /**
   * @param {string} [name]
   */
  Eyes.prototype.checkWindow = function (name) {
    var that = this;
    this.controlFlow = this.controlFlow.then(function () {
      return new Promise(function (resolve, reject) {
        that.eyesEmitter.once('eyes:checkWindowDone', function (testResult) {
          if (testResult.asExpected === false) {
            return reject(new Error("Match detected differences!"));
          }
          resolve();
        });
        that.socket.emitEvent('eyes:checkWindow', { name: name });
      });
    });

    return this.controlFlow;
  };

  Eyes.prototype.close = function () {
    var that = this;
    this.controlFlow = this.controlFlow.then(function () {
      return new Promise(function (resolve) {
        that.eyesEmitter.once('eyes:closeDone', function (testResults) {
          debugger;
          resolve();
        });
        that.socket.emitEvent('eyes:close', {});
      });
    });
    return this.controlFlow;
  };

  Eyes.prototype.abortIfNotClosed = function () {
    var that = this;
    this.controlFlow = this.controlFlow.then(function () {
      return new Promise(function (resolve) {
        that.eyesEmitter.once('eyes:abortIfNotClosedDone', resolve);
        that.socket.emitEvent('eyes:abortIfNotClosed', {});
      });
    });
    return this.controlFlow;
  };

  /**
   * @param {function} callback
   */
  Eyes.prototype.whenDone = function (callback) {
    if (callback) {
      this.controlFlow.then(callback, callback);
    }

    return this.controlFlow;
  };

  /**
   * @param {function} [callback]
   */
  Eyes.prototype.afterEach = function (callback) {
    this.controlFlow = this.controlFlow.catch(function (err) {
      // ignore between
    });

    if (callback) callback();
  };

  window.Eyes = Eyes;
  return Eyes;
}());
